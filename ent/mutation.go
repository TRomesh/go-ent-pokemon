// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/tromesh/go-ent-pokemon/ent/battle"
	"github.com/tromesh/go-ent-pokemon/ent/pokemon"
	"github.com/tromesh/go-ent-pokemon/ent/predicate"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBattle  = "Battle"
	TypePokemon = "Pokemon"
)

// BattleMutation represents an operation that mutates the Battle nodes in the graph.
type BattleMutation struct {
	config
	op               Op
	typ              string
	id               *int
	result           *string
	created_at       *time.Time
	updated_at       *time.Time
	clearedFields    map[string]struct{}
	contender        *int
	clearedcontender bool
	oponent          *int
	clearedoponent   bool
	done             bool
	oldValue         func(context.Context) (*Battle, error)
	predicates       []predicate.Battle
}

var _ ent.Mutation = (*BattleMutation)(nil)

// battleOption allows management of the mutation configuration using functional options.
type battleOption func(*BattleMutation)

// newBattleMutation creates new mutation for the Battle entity.
func newBattleMutation(c config, op Op, opts ...battleOption) *BattleMutation {
	m := &BattleMutation{
		config:        c,
		op:            op,
		typ:           TypeBattle,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBattleID sets the ID field of the mutation.
func withBattleID(id int) battleOption {
	return func(m *BattleMutation) {
		var (
			err   error
			once  sync.Once
			value *Battle
		)
		m.oldValue = func(ctx context.Context) (*Battle, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Battle.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBattle sets the old Battle of the mutation.
func withBattle(node *Battle) battleOption {
	return func(m *BattleMutation) {
		m.oldValue = func(context.Context) (*Battle, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BattleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BattleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Battle entities.
func (m *BattleMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BattleMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BattleMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Battle.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetResult sets the "result" field.
func (m *BattleMutation) SetResult(s string) {
	m.result = &s
}

// Result returns the value of the "result" field in the mutation.
func (m *BattleMutation) Result() (r string, exists bool) {
	v := m.result
	if v == nil {
		return
	}
	return *v, true
}

// OldResult returns the old "result" field's value of the Battle entity.
// If the Battle object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BattleMutation) OldResult(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResult is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResult requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResult: %w", err)
	}
	return oldValue.Result, nil
}

// ResetResult resets all changes to the "result" field.
func (m *BattleMutation) ResetResult() {
	m.result = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *BattleMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *BattleMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Battle entity.
// If the Battle object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BattleMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *BattleMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *BattleMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *BattleMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Battle entity.
// If the Battle object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BattleMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *BattleMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetContenderID sets the "contender" edge to the Pokemon entity by id.
func (m *BattleMutation) SetContenderID(id int) {
	m.contender = &id
}

// ClearContender clears the "contender" edge to the Pokemon entity.
func (m *BattleMutation) ClearContender() {
	m.clearedcontender = true
}

// ContenderCleared reports if the "contender" edge to the Pokemon entity was cleared.
func (m *BattleMutation) ContenderCleared() bool {
	return m.clearedcontender
}

// ContenderID returns the "contender" edge ID in the mutation.
func (m *BattleMutation) ContenderID() (id int, exists bool) {
	if m.contender != nil {
		return *m.contender, true
	}
	return
}

// ContenderIDs returns the "contender" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ContenderID instead. It exists only for internal usage by the builders.
func (m *BattleMutation) ContenderIDs() (ids []int) {
	if id := m.contender; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetContender resets all changes to the "contender" edge.
func (m *BattleMutation) ResetContender() {
	m.contender = nil
	m.clearedcontender = false
}

// SetOponentID sets the "oponent" edge to the Pokemon entity by id.
func (m *BattleMutation) SetOponentID(id int) {
	m.oponent = &id
}

// ClearOponent clears the "oponent" edge to the Pokemon entity.
func (m *BattleMutation) ClearOponent() {
	m.clearedoponent = true
}

// OponentCleared reports if the "oponent" edge to the Pokemon entity was cleared.
func (m *BattleMutation) OponentCleared() bool {
	return m.clearedoponent
}

// OponentID returns the "oponent" edge ID in the mutation.
func (m *BattleMutation) OponentID() (id int, exists bool) {
	if m.oponent != nil {
		return *m.oponent, true
	}
	return
}

// OponentIDs returns the "oponent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OponentID instead. It exists only for internal usage by the builders.
func (m *BattleMutation) OponentIDs() (ids []int) {
	if id := m.oponent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOponent resets all changes to the "oponent" edge.
func (m *BattleMutation) ResetOponent() {
	m.oponent = nil
	m.clearedoponent = false
}

// Where appends a list predicates to the BattleMutation builder.
func (m *BattleMutation) Where(ps ...predicate.Battle) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *BattleMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Battle).
func (m *BattleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BattleMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.result != nil {
		fields = append(fields, battle.FieldResult)
	}
	if m.created_at != nil {
		fields = append(fields, battle.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, battle.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BattleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case battle.FieldResult:
		return m.Result()
	case battle.FieldCreatedAt:
		return m.CreatedAt()
	case battle.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BattleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case battle.FieldResult:
		return m.OldResult(ctx)
	case battle.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case battle.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Battle field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BattleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case battle.FieldResult:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResult(v)
		return nil
	case battle.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case battle.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Battle field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BattleMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BattleMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BattleMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Battle numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BattleMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BattleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BattleMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Battle nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BattleMutation) ResetField(name string) error {
	switch name {
	case battle.FieldResult:
		m.ResetResult()
		return nil
	case battle.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case battle.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Battle field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BattleMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.contender != nil {
		edges = append(edges, battle.EdgeContender)
	}
	if m.oponent != nil {
		edges = append(edges, battle.EdgeOponent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BattleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case battle.EdgeContender:
		if id := m.contender; id != nil {
			return []ent.Value{*id}
		}
	case battle.EdgeOponent:
		if id := m.oponent; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BattleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BattleMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BattleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedcontender {
		edges = append(edges, battle.EdgeContender)
	}
	if m.clearedoponent {
		edges = append(edges, battle.EdgeOponent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BattleMutation) EdgeCleared(name string) bool {
	switch name {
	case battle.EdgeContender:
		return m.clearedcontender
	case battle.EdgeOponent:
		return m.clearedoponent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BattleMutation) ClearEdge(name string) error {
	switch name {
	case battle.EdgeContender:
		m.ClearContender()
		return nil
	case battle.EdgeOponent:
		m.ClearOponent()
		return nil
	}
	return fmt.Errorf("unknown Battle unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BattleMutation) ResetEdge(name string) error {
	switch name {
	case battle.EdgeContender:
		m.ResetContender()
		return nil
	case battle.EdgeOponent:
		m.ResetOponent()
		return nil
	}
	return fmt.Errorf("unknown Battle edge %s", name)
}

// PokemonMutation represents an operation that mutates the Pokemon nodes in the graph.
type PokemonMutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	description      *string
	weight           *float64
	addweight        *float64
	height           *float64
	addheight        *float64
	created_at       *time.Time
	updated_at       *time.Time
	clearedFields    map[string]struct{}
	contender        map[int]struct{}
	removedcontender map[int]struct{}
	clearedcontender bool
	opponent         map[int]struct{}
	removedopponent  map[int]struct{}
	clearedopponent  bool
	done             bool
	oldValue         func(context.Context) (*Pokemon, error)
	predicates       []predicate.Pokemon
}

var _ ent.Mutation = (*PokemonMutation)(nil)

// pokemonOption allows management of the mutation configuration using functional options.
type pokemonOption func(*PokemonMutation)

// newPokemonMutation creates new mutation for the Pokemon entity.
func newPokemonMutation(c config, op Op, opts ...pokemonOption) *PokemonMutation {
	m := &PokemonMutation{
		config:        c,
		op:            op,
		typ:           TypePokemon,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPokemonID sets the ID field of the mutation.
func withPokemonID(id int) pokemonOption {
	return func(m *PokemonMutation) {
		var (
			err   error
			once  sync.Once
			value *Pokemon
		)
		m.oldValue = func(ctx context.Context) (*Pokemon, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Pokemon.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPokemon sets the old Pokemon of the mutation.
func withPokemon(node *Pokemon) pokemonOption {
	return func(m *PokemonMutation) {
		m.oldValue = func(context.Context) (*Pokemon, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PokemonMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PokemonMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Pokemon entities.
func (m *PokemonMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PokemonMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PokemonMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Pokemon.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *PokemonMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PokemonMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Pokemon entity.
// If the Pokemon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PokemonMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PokemonMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *PokemonMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *PokemonMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Pokemon entity.
// If the Pokemon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PokemonMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *PokemonMutation) ResetDescription() {
	m.description = nil
}

// SetWeight sets the "weight" field.
func (m *PokemonMutation) SetWeight(f float64) {
	m.weight = &f
	m.addweight = nil
}

// Weight returns the value of the "weight" field in the mutation.
func (m *PokemonMutation) Weight() (r float64, exists bool) {
	v := m.weight
	if v == nil {
		return
	}
	return *v, true
}

// OldWeight returns the old "weight" field's value of the Pokemon entity.
// If the Pokemon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PokemonMutation) OldWeight(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeight: %w", err)
	}
	return oldValue.Weight, nil
}

// AddWeight adds f to the "weight" field.
func (m *PokemonMutation) AddWeight(f float64) {
	if m.addweight != nil {
		*m.addweight += f
	} else {
		m.addweight = &f
	}
}

// AddedWeight returns the value that was added to the "weight" field in this mutation.
func (m *PokemonMutation) AddedWeight() (r float64, exists bool) {
	v := m.addweight
	if v == nil {
		return
	}
	return *v, true
}

// ResetWeight resets all changes to the "weight" field.
func (m *PokemonMutation) ResetWeight() {
	m.weight = nil
	m.addweight = nil
}

// SetHeight sets the "height" field.
func (m *PokemonMutation) SetHeight(f float64) {
	m.height = &f
	m.addheight = nil
}

// Height returns the value of the "height" field in the mutation.
func (m *PokemonMutation) Height() (r float64, exists bool) {
	v := m.height
	if v == nil {
		return
	}
	return *v, true
}

// OldHeight returns the old "height" field's value of the Pokemon entity.
// If the Pokemon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PokemonMutation) OldHeight(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeight: %w", err)
	}
	return oldValue.Height, nil
}

// AddHeight adds f to the "height" field.
func (m *PokemonMutation) AddHeight(f float64) {
	if m.addheight != nil {
		*m.addheight += f
	} else {
		m.addheight = &f
	}
}

// AddedHeight returns the value that was added to the "height" field in this mutation.
func (m *PokemonMutation) AddedHeight() (r float64, exists bool) {
	v := m.addheight
	if v == nil {
		return
	}
	return *v, true
}

// ResetHeight resets all changes to the "height" field.
func (m *PokemonMutation) ResetHeight() {
	m.height = nil
	m.addheight = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *PokemonMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PokemonMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Pokemon entity.
// If the Pokemon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PokemonMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PokemonMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PokemonMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PokemonMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Pokemon entity.
// If the Pokemon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PokemonMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PokemonMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddContenderIDs adds the "contender" edge to the Battle entity by ids.
func (m *PokemonMutation) AddContenderIDs(ids ...int) {
	if m.contender == nil {
		m.contender = make(map[int]struct{})
	}
	for i := range ids {
		m.contender[ids[i]] = struct{}{}
	}
}

// ClearContender clears the "contender" edge to the Battle entity.
func (m *PokemonMutation) ClearContender() {
	m.clearedcontender = true
}

// ContenderCleared reports if the "contender" edge to the Battle entity was cleared.
func (m *PokemonMutation) ContenderCleared() bool {
	return m.clearedcontender
}

// RemoveContenderIDs removes the "contender" edge to the Battle entity by IDs.
func (m *PokemonMutation) RemoveContenderIDs(ids ...int) {
	if m.removedcontender == nil {
		m.removedcontender = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.contender, ids[i])
		m.removedcontender[ids[i]] = struct{}{}
	}
}

// RemovedContender returns the removed IDs of the "contender" edge to the Battle entity.
func (m *PokemonMutation) RemovedContenderIDs() (ids []int) {
	for id := range m.removedcontender {
		ids = append(ids, id)
	}
	return
}

// ContenderIDs returns the "contender" edge IDs in the mutation.
func (m *PokemonMutation) ContenderIDs() (ids []int) {
	for id := range m.contender {
		ids = append(ids, id)
	}
	return
}

// ResetContender resets all changes to the "contender" edge.
func (m *PokemonMutation) ResetContender() {
	m.contender = nil
	m.clearedcontender = false
	m.removedcontender = nil
}

// AddOpponentIDs adds the "opponent" edge to the Battle entity by ids.
func (m *PokemonMutation) AddOpponentIDs(ids ...int) {
	if m.opponent == nil {
		m.opponent = make(map[int]struct{})
	}
	for i := range ids {
		m.opponent[ids[i]] = struct{}{}
	}
}

// ClearOpponent clears the "opponent" edge to the Battle entity.
func (m *PokemonMutation) ClearOpponent() {
	m.clearedopponent = true
}

// OpponentCleared reports if the "opponent" edge to the Battle entity was cleared.
func (m *PokemonMutation) OpponentCleared() bool {
	return m.clearedopponent
}

// RemoveOpponentIDs removes the "opponent" edge to the Battle entity by IDs.
func (m *PokemonMutation) RemoveOpponentIDs(ids ...int) {
	if m.removedopponent == nil {
		m.removedopponent = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.opponent, ids[i])
		m.removedopponent[ids[i]] = struct{}{}
	}
}

// RemovedOpponent returns the removed IDs of the "opponent" edge to the Battle entity.
func (m *PokemonMutation) RemovedOpponentIDs() (ids []int) {
	for id := range m.removedopponent {
		ids = append(ids, id)
	}
	return
}

// OpponentIDs returns the "opponent" edge IDs in the mutation.
func (m *PokemonMutation) OpponentIDs() (ids []int) {
	for id := range m.opponent {
		ids = append(ids, id)
	}
	return
}

// ResetOpponent resets all changes to the "opponent" edge.
func (m *PokemonMutation) ResetOpponent() {
	m.opponent = nil
	m.clearedopponent = false
	m.removedopponent = nil
}

// Where appends a list predicates to the PokemonMutation builder.
func (m *PokemonMutation) Where(ps ...predicate.Pokemon) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PokemonMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Pokemon).
func (m *PokemonMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PokemonMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, pokemon.FieldName)
	}
	if m.description != nil {
		fields = append(fields, pokemon.FieldDescription)
	}
	if m.weight != nil {
		fields = append(fields, pokemon.FieldWeight)
	}
	if m.height != nil {
		fields = append(fields, pokemon.FieldHeight)
	}
	if m.created_at != nil {
		fields = append(fields, pokemon.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, pokemon.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PokemonMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case pokemon.FieldName:
		return m.Name()
	case pokemon.FieldDescription:
		return m.Description()
	case pokemon.FieldWeight:
		return m.Weight()
	case pokemon.FieldHeight:
		return m.Height()
	case pokemon.FieldCreatedAt:
		return m.CreatedAt()
	case pokemon.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PokemonMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case pokemon.FieldName:
		return m.OldName(ctx)
	case pokemon.FieldDescription:
		return m.OldDescription(ctx)
	case pokemon.FieldWeight:
		return m.OldWeight(ctx)
	case pokemon.FieldHeight:
		return m.OldHeight(ctx)
	case pokemon.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case pokemon.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Pokemon field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PokemonMutation) SetField(name string, value ent.Value) error {
	switch name {
	case pokemon.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case pokemon.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case pokemon.FieldWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeight(v)
		return nil
	case pokemon.FieldHeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeight(v)
		return nil
	case pokemon.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case pokemon.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Pokemon field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PokemonMutation) AddedFields() []string {
	var fields []string
	if m.addweight != nil {
		fields = append(fields, pokemon.FieldWeight)
	}
	if m.addheight != nil {
		fields = append(fields, pokemon.FieldHeight)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PokemonMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case pokemon.FieldWeight:
		return m.AddedWeight()
	case pokemon.FieldHeight:
		return m.AddedHeight()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PokemonMutation) AddField(name string, value ent.Value) error {
	switch name {
	case pokemon.FieldWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWeight(v)
		return nil
	case pokemon.FieldHeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHeight(v)
		return nil
	}
	return fmt.Errorf("unknown Pokemon numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PokemonMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PokemonMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PokemonMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Pokemon nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PokemonMutation) ResetField(name string) error {
	switch name {
	case pokemon.FieldName:
		m.ResetName()
		return nil
	case pokemon.FieldDescription:
		m.ResetDescription()
		return nil
	case pokemon.FieldWeight:
		m.ResetWeight()
		return nil
	case pokemon.FieldHeight:
		m.ResetHeight()
		return nil
	case pokemon.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case pokemon.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Pokemon field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PokemonMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.contender != nil {
		edges = append(edges, pokemon.EdgeContender)
	}
	if m.opponent != nil {
		edges = append(edges, pokemon.EdgeOpponent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PokemonMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case pokemon.EdgeContender:
		ids := make([]ent.Value, 0, len(m.contender))
		for id := range m.contender {
			ids = append(ids, id)
		}
		return ids
	case pokemon.EdgeOpponent:
		ids := make([]ent.Value, 0, len(m.opponent))
		for id := range m.opponent {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PokemonMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedcontender != nil {
		edges = append(edges, pokemon.EdgeContender)
	}
	if m.removedopponent != nil {
		edges = append(edges, pokemon.EdgeOpponent)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PokemonMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case pokemon.EdgeContender:
		ids := make([]ent.Value, 0, len(m.removedcontender))
		for id := range m.removedcontender {
			ids = append(ids, id)
		}
		return ids
	case pokemon.EdgeOpponent:
		ids := make([]ent.Value, 0, len(m.removedopponent))
		for id := range m.removedopponent {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PokemonMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedcontender {
		edges = append(edges, pokemon.EdgeContender)
	}
	if m.clearedopponent {
		edges = append(edges, pokemon.EdgeOpponent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PokemonMutation) EdgeCleared(name string) bool {
	switch name {
	case pokemon.EdgeContender:
		return m.clearedcontender
	case pokemon.EdgeOpponent:
		return m.clearedopponent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PokemonMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Pokemon unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PokemonMutation) ResetEdge(name string) error {
	switch name {
	case pokemon.EdgeContender:
		m.ResetContender()
		return nil
	case pokemon.EdgeOpponent:
		m.ResetOpponent()
		return nil
	}
	return fmt.Errorf("unknown Pokemon edge %s", name)
}
